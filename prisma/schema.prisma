// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS AND OTHER TYPES
// ROLE
// ROLE
enum Role {
  USER
  ADMIN
  BANNED
}

// THIS ONE IS FOR THE STATUS OF ORDER
enum OrderStatus {
  PENDING // THIS IS GOING TO BE DEFAULT WHEN USERS CREATS ORDER
  REJECTED // MEANS SOMETHING WENT WRONG
  FULFILLED // MENAS PAYED
  DELIVERED
}

// WE WILL USE JUST PayPal (WHICH ALSO HAS CREDIT CARD PAYMENT ALSO)
// BUT IN FUTURE IF ANYONE WANTS TO ADD OTHER STUFF THIS CAN BE EXTENDED
enum PaymentProvider {
  PayPal
  Stripe
}

//                    NEXT-AUTH RELATED STUFF
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  //
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  // WE EXTEN THIS WITH Profile RECORD
  profiles      Profile[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// --------------------------------------------------
// IDEA BEHIND Profile RECORD IS TO BE LIKE "EXTENSION"
// OF User RECORD (BECAUSE I DON'T WANT TO TOUCH
// User RECORD (WHY? I DON'T KNOW, IT IS USED PRIMARLY BY
// next-auth AND I DON'T WANT TO TOUCH IT)
// (FOR EXAMPLE I NEED TO USE SOME FEATURES OF next-auth
// BECAUSE I WANT TO INSERT EXTRA DATA ON SESSION OBJECT
// AND I WANT TO CREATE Profile RECORD WHEN NEXT AUTH
// CREATES "THEIR" User RECORD )
// DOING EXTRA STUFF FOR THE SAKE OF DOING EXTRA STUFF
// AND EDUCATING MYSELF
// ALSO Profile WILL HAVE EXTRA DATA, LIKE ADRESS STUFF (WHERE TO DELIVER AND ALL THAT)
// --------------------------------------------------

model Profile {
  id                     String    @id @default(cuid())
  user                   User      @relation(fields: [userId], references: [id])
  userId                 String
  role                   Role      @default(USER)
  // FOR SHIPPING PURPOSES
  addrss                 String?
  city                   String?
  postalCode             String?
  country                String?
  paymentMethod          String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now()) @updatedAt
  // --------------
  ordersHistory          Order[]
  reviewsHistory         Review[]
  // FOR ADMIN USER
  productCreationHistory Product[]
}

// -------------------------------------------------------------
// -------------------------------------------------------------

// -------- PRODUCT---------------------------------------------

model Product {
  productId     String         @id @default(cuid())
  admin         Profile        @relation(fields: [adminId], references: [id])
  adminId       String
  name          String
  image         String
  description   String
  brand         String
  category      String?
  price         Float
  countInStock  Int
  // AVERAGE OF ALL OF THE REVIEW RATING (JUST YOU KNOW)
  rating        Float          @default(0.0)
  numReviews    Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  //  Reviews
  reviews       Review[]
  // OrderElements
  orderElements OrderElement[]
}

// -------------------------------------------------------------
// -------------------------------------------------------------

// -------- REVIEW--------------------------------------------

model Review {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [productId])
  productId String
  rating    Float
  user      Profile  @relation(fields: [userId], references: [id])
  userId    String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------------------------------------------------
// -------------------------------------------------------------

// -------- ORDER ELEMENT
// (LINKS SINGLE PRODUCT RECORD WITH THE ORDER;
// -------- PRODUCTS QUANTITY (NUMBER OF SINGLE PRODUCT
// -------- IS DEFINED HERE))
// SO ONE ORDER CAN HAVE MAND ORDER ELEMENTS THAT DESCRIBE
// PRODUCTS IN ONE ORDER

model OrderElement {
  id        String  @id @default(cuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [productId])
  productId String
  // ----------------------
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ------------   ORDER ----------------------

model Order {
  id              String         @id @default(cuid())
  buyer           Profile        @relation(fields: [buyerId], references: [id])
  buyerId         String
  items           OrderElement[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  // WE WILL UPDATE THIS
  // WHEN WE FIND OUT STATUS FROM paymentResult
  // OR MAYBE WE WILL REMOVE THIS IN THE FUTURE
  status          OrderStatus    @default(PENDING)
  // WE DON'T NEED THIS BECAUSE WE ALREADY HAVE    deliveredAt    ROW
  // isDelivered     Boolean        @default(false)
  // THIS IS GOING TO BE IN PERCENTS
  taxPrice        Float?         @default(0.0)
  totalPrice      Float?
  paymentMethod   String?
  // PAYPAL RELATED (MYBE ALSO STRIPE OR SOME OTHER PROVIDER (FOR NOW IT IS ONLY PAYPAL
  // SINCE WE ARE NOT PLANING ON USING STRIPE))
  paymentResult   PaymentResult? @relation(fields: [paymentResultId], references: [id])
  //
  paymentResultId String?
  shippingPrice   Float?         @default(0.0)
  payedAt         DateTime?
  deliveredAt     DateTime?
}

// -----------------------------------------------------------------------
// -----------------------------------------------------------------------
// -----------------------------------------------------------------------
// ------------------- PAYMENT RESULT
// WE KEEP HERINFO FROM PAYPAL
// I WON'T BE ADDING OTHER PROVIDERS
// BUT ONE FIELD WILL BE INTENDED FOR STORING PAYMENTS PROVIDER NAME
// THIS IS ONLY GOING TO BE CREATED AFTER SUCCESSFUL PAYMENT
// OR I GUESS MAYBE PAYMENT THAT IS PROCESSED

model PaymentResult {
  // THIS IS THE ID THAT WILL BE GENERATED
  id              String          @id @default(cuid())
  // THIS IS THE ID FROM PAYPAL (OR ANY OTHER PROVIDER)
  paymentId       String
  // THIS IS A PROVIDER
  paymentProvider PaymentProvider
  // MAYBE WE WILL CHANGE THIS status FIELD IN THE FUTURE
  // MAYBE THERE ARE SOME STANDARDIZED STATUS VALUES
  status          String?
  update_time     String?
  email           String?
  orders          Order[]
}

// ------------------------------------------------------------------------
