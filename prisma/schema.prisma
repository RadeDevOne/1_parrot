// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS AND OTHER TYPES
// ROLE
// ROLE
enum Role {
  USER
  ADMIN
  BANNED
}

// THIS ONE IS FOR THE STATUS OF ORDER
enum OrderStatus {
  PENDING
  FULFILLED
  REJECTED
}

//                    NEXT-AUTH
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  //
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  // WE EXTEN THIS WITH Profile RECORD
  profiles      Profile[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// --------------------------------------------------
// IDEA BEHIND Profile RECORD IS TO BE LIKE "EXTENSION"
// OF User RECORD (BECAUSE I DON'T WANT TO TOUCH
// User RECORD (WHY? I DON'T KNOW, IT IS USED PRIMARLY BY
// next-auth AND I DON'T WANT TO TOUCH IT)
// AND BY DOING THIS I TO DO HAVE MORE THINGS
// IN TERMS OF EDUCATING MYSELF ABOUT SOME OTHER
// FEATURES OF PACKAGES WE USE
// (FOR EXAMPLE I NEED TO USE SOME FEATURES OF next-auth
// BECAUSE I WANT TO INSERT EXTRA DATA ON SESSION OBJECT
// AND I WANT TO CREATE Profile RECORD WHEN NEXT AUTH
// CREATES "THEIR" User RECORD )
// --------------------------------------------------

model Profile {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  role          Role     @default(USER)
  // FOR SHIPPING PURPOSES
  addrss        String?
  city          String?
  postalCode    String?
  country       String?
  paymentMethod String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  // --------------
  // ordersHistory Order[]
  // reviewsHistory         Review[]
  // FOR ADMIN USER
  // productCreationHistory Product[]
}

// --------------------------------------------------
// --------------------------------------------------
